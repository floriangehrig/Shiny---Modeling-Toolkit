on.exit(setwd(owd))
file.copy(src, 'report.Rmd', overwrite = TRUE)
library(rmarkdown)
out <- render('report.Rmd', switch(
input$format,
PDF = pdf_document(), HTML = html_document(), Word = word_document()
))
file.rename(out, file)
}
)
}
shinyApp(server,ui)
library(shiny)
library(shinydashboard)
ui =  fluidPage(
title = 'Download a PDF report',
sidebarLayout(
sidebarPanel(
helpText(),
selectInput('x', 'Build a regression model of mpg against:',
choices = names(mtcars)[-1]),
radioButtons('format', 'Document format', c('PDF', 'HTML', 'Word'),
inline = TRUE),
downloadButton('downloadReport')
),
mainPanel(
)
)
)
server = function(input, output) {
output$downloadReport <- downloadHandler(
filename = function() {
paste('my-report', sep = '.', switch(
input$format, PDF = 'pdf', HTML = 'html', Word = 'docx'
))
},
content = function(file) {
src <- normalizePath('report.Rmd')
# temporarily switch to the temp dir, in case you do not have write
# permission to the current working directory
owd <- setwd(tempdir())
on.exit(setwd(owd))
file.copy(src, 'report.Rmd', overwrite = TRUE)
library(rmarkdown)
out <- render('report.Rmd', switch(
input$format,
PDF = pdf_document(), HTML = html_document(), Word = word_document()
))
file.rename(out, file)
}
)
}
shinyApp(server,ui)
## app.R ##
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
## app.R ##
library(shinydashboard)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
## app.R ##
library(shinydashboard)
library(shiny)
ui <- fluidPage(
sliderInput("slider", "Slider", 1, 100, 50),
downloadButton("report", "Generate report")
)
server <- function(input, output) {
data <- reactive({
df <- datasets::iris
return(df)
})
graph <- reactive({
hchart(data(), "scatter", hcaes(x = Petal.Length, y = Petal.Width, group = Species))
})
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "report.html",
content = function(file) {
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "report.Rmd")
file.copy("report.Rmd", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(plot = graph())
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,
params = params,
envir = new.env(parent = globalenv())
)
}
)
}
shinyApp(ui, server)
shiny::runApp('C:/Users/Florian Gehrig/Desktop')
runApp('C:/Users/Florian Gehrig/Desktop')
runApp()
runApp()
runApp('C:/Users/Florian Gehrig/Desktop')
runApp('C:/Users/Florian Gehrig/Desktop')
library(psych)
psych::describe(datasets::mtcars)
psych::describe(datasets::iris)
library(Hmisc)
install.packages("Hmisc")
data <- datasets::iris
library(Hmisc)
describe(data)
library(tidyverse)
df_status(data)
library(funModeling)
df_status(data)
install.packages("funModeling")
library(funModeling)
df_status(data)
install.packages("kableExtra")
install.packages(c("bsplus", "future", "iml", "RPostgreSQL", "shinyAce", "shinycssloaders", "shinyhelper", "skimr"))
df <- datasets::iris
count(sapply(df,is.numeric))
n(sapply(df,is.numeric))
sum(sapply(df,is.numeric))
df
sum(sapply(df,is.character))
sum(sapply(df,is.numeric == FALSE))
df <- datasets::presidents
sum(sapply(df,is.numeric))
skimr::skim_to_list(read)$integer
skimr::skim_to_list(df)$integer
df <- datasets::presidents
sum(sapply(df,is.numeric))
skimr::skim_to_list(df)
df <- datasets::airquality
df
df <- datasets::airquality
sum(sapply(df,is.numeric))
skimr::skim_to_list(df)$integer
skimr::skim_to_list(df)
skimr::skim_to_list(df)$int
skimr::skim_to_list(df)$integer
df <- datasets::bank
sum(sapply(df,is.numeric))
skimr::skim_to_list(df)$integer
read <- datasets::iris
ncoL(read)
ncol(read)
read <- datasets::iris
ncol(read)
(ncol(read) - sum(sapply(df,is.numeric)))
ncol(read)
sapply(df,is.numeric)
sapply(df,is.numeric)
apply(read,is.numeric)
sapply(read,is.numeric)
sum(sapply(read,is.numeric))
(ncol(read) - sum(sapply(read,is.numeric)))
library(shiny); runApp('GitHub/Analytics-R/Pipelines & Toolkits/Machine Learning Toolkit/Machine Learning Toolkit_v11_temp.R')
runApp('GitHub/Analytics-R/Pipelines & Toolkits/Machine Learning Toolkit/Machine Learning Toolkit_v11_temp.R')
library(shiny); runApp('GitHub/Analytics-R/Pipelines & Toolkits/Machine Learning Toolkit/Machine Learning Toolkit_v11_temp.R')
shiny::runApp(paste("C:/Users/",Sys.info()[["user"]],"/Documents/GitHub/Analytics-R/Pipelines & Toolkits/Machine Learning Toolkit/Typing Toolkit - Machine Learning", sep=""))
runApp('GitHub/Analytics-R/Pipelines & Toolkits/Machine Learning Toolkit/Machine Learning Toolkit_v11_temp.R')
runApp('GitHub/Analytics-R/Pipelines & Toolkits/Machine Learning Toolkit/Machine Learning Toolkit_v11_temp.R')
shiny::runApp(paste("C:/Users/",Sys.info()[["user"]],"/Documents/GitHub/Analytics-R/Pipelines & Toolkits/Machine Learning Toolkit/Typing Toolkit - Machine Learning", sep=""))
shiny::runApp(paste("C:/Users/",Sys.info()[["user"]],"/Documents/GitHub/Analytics-R/Pipelines & Toolkits/Machine Learning Toolkit/Typing Toolkit - Machine Learning", sep=""))
runApp('GitHub/Analytics-R/Pipelines & Toolkits/Machine Learning Toolkit/Machine Learning Toolkit_v11_temp.R')
library(RInno)
# SET DIRECTORY
setwd(paste("C:/Users/",Sys.info()[["user"]],"/Documents/GitHub/Analytics-R/Pipelines & Toolkits/Machine Learning Toolkit/Prediction Toolkit", sep=""))
compile_iss()
shiny::runApp(paste("C:/Users/",Sys.info()[["user"]],"/Documents/GitHub/Analytics-R/Pipelines & Toolkits/Machine Learning Toolkit/Prediction Toolkit", sep=""))
shiny::runApp(paste("C:/Users/",Sys.info()[["user"]],"/Documents/GitHub/Analytics-R/Pipelines & Toolkits/Machine Learning Toolkit/Prediction Toolkit", sep=""))
# DEPLOY APPLICATION
create_app(
app_name = "Prediction Tool",
app_dir  = paste("C:/Users/",Sys.info()[["user"]],"/Documents/Prediction Toolkit",sep=""),
include_R = TRUE,
#privilege   = "high",   # Admin only installation
#default_dir = "autopf",
# app_icon   = "new_app_icon.ico", # <--- TO ADAPT;
# setup_icon = "new_setup_icon.ico",
pkgs     = c("shiny",
"shinyAce",
"shinydashboard",
"shinydashboardPlus",
"shinyjs",
"shinyWidgets",
"DBI",
"highcharter",
"rapport",
"foreign",
"viridis",
"rlist",
"iml",
"shinycssloaders",
"future",
"bsplus",
"skimr",
"shinyhelper",
"DT",
"plyr",
"tidyverse",
"pracma",
"data.table",
"caret",
"colorspace")
)
library(RInno)
# SET DIRECTORY
setwd(paste("C:/Users/",Sys.info()[["user"]],"/Documents/GitHub/Analytics-R/Pipelines & Toolkits/Machine Learning Toolkit/Prediction Toolkit", sep=""))
shiny::runApp(paste("C:/Users/",Sys.info()[["user"]],"/Documents/GitHub/Analytics-R/Pipelines & Toolkits/Machine Learning Toolkit/Prediction Toolkit", sep=""))
# DEPLOY APPLICATION
create_app(
app_name = "Prediction Tool",
app_dir  = paste("C:/Users/",Sys.info()[["user"]],"/Documents/Prediction Toolkit",sep=""),
include_R = TRUE,
#privilege   = "high",   # Admin only installation
#default_dir = "autopf",
# app_icon   = "new_app_icon.ico", # <--- TO ADAPT;
# setup_icon = "new_setup_icon.ico",
pkgs     = c("shiny",
"shinyAce",
"shinydashboard",
"shinydashboardPlus",
"shinyjs",
"shinyWidgets",
"DBI",
"highcharter",
"rapport",
"foreign",
"viridis",
"rlist",
"iml",
"shinycssloaders",
"future",
"bsplus",
"skimr",
"shinyhelper",
"DT",
"plyr",
"tidyverse",
"pracma",
"data.table",
"caret",
"colorspace")
)
Sys.sleep(9)
compile_iss()
shiny::runApp(paste("C:/Users/",Sys.info()[["user"]],"/Documents/GitHub/Analytics-R/Pipelines & Toolkits/Machine Learning Toolkit/Prediction Toolkit", sep=""))
shiny::runApp(paste("C:/Users/",Sys.info()[["user"]],"/Documents/GitHub/Analytics-R/Pipelines & Toolkits/Machine Learning Toolkit/Prediction Toolkit", sep=""))
# DEPLOY APPLICATION
create_app(
app_name = "Prediction Tool",
app_dir  = paste("C:/Users/",Sys.info()[["user"]],"/Documents/Prediction Toolkit",sep=""),
include_R = TRUE,
#privilege   = "high",   # Admin only installation
#default_dir = "autopf",
user_browser="firefox",
# app_icon   = "new_app_icon.ico", # <--- TO ADAPT;
# setup_icon = "new_setup_icon.ico",
pkgs     = c("shiny",
"shinyAce",
"shinydashboard",
"shinydashboardPlus",
"shinyjs",
"shinyWidgets",
"DBI",
"highcharter",
"rapport",
"foreign",
"viridis",
"rlist",
"iml",
"shinycssloaders",
"future",
"bsplus",
"skimr",
"shinyhelper",
"DT",
"plyr",
"tidyverse",
"pracma",
"data.table",
"caret",
"colorspace")
)
compile_iss()
compile_iss()
# TEST APPLICATION
shiny::runApp(paste("C:/Users/",Sys.info()[["user"]],"/Documents/GitHub/Analytics-R/Pipelines & Toolkits/Machine Learning Toolkit/Prediction Toolkit", sep=""))
# TEST APPLICATION
shiny::runApp(paste("C:/Users/",Sys.info()[["user"]],"/Documents/GitHub/Analytics-R/Pipelines & Toolkits/Machine Learning Toolkit/Prediction Toolkit", sep=""))
shiny::runApp(paste("C:/Users/",Sys.info()[["user"]],"/Documents/GitHub/Analytics-R/Pipelines & Toolkits/Machine Learning Toolkit/Prediction Toolkit", sep=""))
# DEPLOY APPLICATION
create_app(
app_name = "Prediction Tool",
app_dir  = paste("C:/Users/",Sys.info()[["user"]],"/Documents/Prediction Toolkit",sep=""),
include_R = TRUE,
#privilege   = "high",   # Admin only installation
#default_dir = "autopf",
user_browser="firefox",
# app_icon   = "new_app_icon.ico", # <--- TO ADAPT;
# setup_icon = "new_setup_icon.ico",
pkgs     = c("shiny",
"shinyAce",
"shinydashboard",
"shinydashboardPlus",
"shinyjs",
"shinyWidgets",
"DBI",
"highcharter",
"rapport",
"foreign",
"viridis",
"rlist",
"iml",
"shinycssloaders",
"future",
"bsplus",
"skimr",
"shinyhelper",
"DT",
"plyr",
"tidyverse",
"pracma",
"data.table",
"caret",
"colorspace")
)
library(RInno)
# SET DIRECTORY
setwd(paste("C:/Users/",Sys.info()[["user"]],"/Documents/GitHub/Analytics-R/Pipelines & Toolkits/Machine Learning Toolkit/Prediction Toolkit", sep=""))
# DEPLOY APPLICATION
create_app(
app_name = "Prediction Tool",
app_dir  = paste("C:/Users/",Sys.info()[["user"]],"/Documents/Prediction Toolkit",sep=""),
include_R = TRUE,
#privilege   = "high",   # Admin only installation
#default_dir = "autopf",
user_browser="firefox",
# app_icon   = "new_app_icon.ico", # <--- TO ADAPT;
# setup_icon = "new_setup_icon.ico",
pkgs     = c("shiny",
"shinyAce",
"shinydashboard",
"shinydashboardPlus",
"shinyjs",
"shinyWidgets",
"DBI",
"highcharter",
"rapport",
"foreign",
"viridis",
"rlist",
"iml",
"shinycssloaders",
"future",
"bsplus",
"skimr",
"shinyhelper",
"DT",
"plyr",
"tidyverse",
"pracma",
"data.table",
"caret",
"colorspace")
)
compile_iss()
library(RInno)
# SET DIRECTORY
setwd(paste("C:/Users/",Sys.info()[["user"]],"/Documents/GitHub/Analytics-R/Pipelines & Toolkits/Machine Learning Toolkit/Prediction Toolkit", sep=""))
# TEST APPLICATION
#shiny::runApp(paste("C:/Users/",Sys.info()[["user"]],"/Documents/GitHub/Analytics-R/Pipelines & Toolkits/Machine Learning Toolkit/Prediction Toolkit", sep=""))
# DEPLOY APPLICATION
create_app(
app_name = "Prediction Toolkit",
app_dir  = paste("C:/Users/",Sys.info()[["user"]],"/Documents/Prediction Toolkit",sep=""),
include_R = TRUE,
#privilege   = "high",   # Admin only installation
#default_dir = "autopf",
user_browser="firefox",
# app_icon   = "new_app_icon.ico", # <--- TO ADAPT;
# setup_icon = "new_setup_icon.ico",
pkgs     = c("shiny",
"shinyAce",
"shinydashboard",
"shinydashboardPlus",
"shinyjs",
"shinyWidgets",
"DBI",
"highcharter",
"rapport",
"foreign",
"viridis",
"rlist",
"iml",
"shinycssloaders",
"future",
"bsplus",
"skimr",
"shinyhelper",
"DT",
"plyr",
"tidyverse",
"pracma",
"data.table",
"caret",
"colorspace")
)
compile_iss()
library(RInno)
# SET DIRECTORY
setwd(paste("C:/Users/",Sys.info()[["user"]],"/Documents/GitHub/Analytics-R/Pipelines & Toolkits/Machine Learning Toolkit/Prediction Toolkit", sep=""))
# TEST APPLICATION
shiny::runApp(paste("C:/Users/",Sys.info()[["user"]],"/Documents/GitHub/Analytics-R/Pipelines & Toolkits/Machine Learning Toolkit/Prediction Toolkit", sep=""))
# DEPLOY APPLICATION
create_app(
app_name = "Prediction Toolkit",
app_dir  = paste("C:/Users/",Sys.info()[["user"]],"/Documents/Prediction Toolkit",sep=""),
include_R = TRUE,
#privilege   = "high",   # Admin only installation
#default_dir = "autopf",
#user_browser="firefox",
# app_icon   = "new_app_icon.ico", # <--- TO ADAPT;
# setup_icon = "new_setup_icon.ico",
pkgs     = c("shiny",
"shinyAce",
"shinydashboard",
"shinydashboardPlus",
"shinyjs",
"shinyWidgets",
"DBI",
"highcharter",
"rapport",
"foreign",
"viridis",
"rlist",
"iml",
"shinycssloaders",
"future",
"bsplus",
"skimr",
"shinyhelper",
"DT",
"plyr",
"tidyverse",
"pracma",
"data.table",
"caret",
"colorspace")
)
compile_iss()
shiny::runApp(paste("C:/Users/",Sys.info()[["user"]],"/Documents/GitHub/Analytics-R/Pipelines & Toolkits/Machine Learning Toolkit/Prediction Toolkit", sep=""))
library(RInno)
# SET DIRECTORY
setwd(paste("C:/Users/",Sys.info()[["user"]],"/Documents/GitHub/Analytics-R/Pipelines & Toolkits/Machine Learning Toolkit/Prediction Toolkit", sep=""))
# TEST APPLICATION
shiny::runApp(paste("C:/Users/",Sys.info()[["user"]],"/Documents/GitHub/Analytics-R/Pipelines & Toolkits/Machine Learning Toolkit/Prediction Toolkit", sep=""))
library(RInno)
# SET DIRECTORY
setwd(paste("C:/Users/",Sys.info()[["user"]],"/Documents/GitHub/Analytics-R/Pipelines & Toolkits/Machine Learning Toolkit/Prediction Toolkit", sep=""))
# TEST APPLICATION
shiny::runApp(paste("C:/Users/",Sys.info()[["user"]],"/Documents/GitHub/Analytics-R/Pipelines & Toolkits/Machine Learning Toolkit/Prediction Toolkit", sep=""))
shiny::runApp(paste("C:/Users/",Sys.info()[["user"]],"/Documents/GitHub/Analytics-R/Pipelines & Toolkits/Machine Learning Toolkit/Prediction Toolkit", sep=""))
shiny::runApp(paste("C:/Users/",Sys.info()[["user"]],"/Documents/GitHub/Analytics-R/Pipelines & Toolkits/Machine Learning Toolkit/Prediction Toolkit", sep=""))
install.packages("RInno")
